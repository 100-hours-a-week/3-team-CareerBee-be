name: Deploy Spring Boot to S3 (Dev)

on:
  push:
    branches: [ develop ]

jobs:
  Deploy-DEV:
    runs-on: ubuntu-latest

    env:
      COMMIT_HASH: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Decrypt env file
        run: |
          openssl enc -aes-256-cbc -d -pbkdf2 -in cicd-variables.sh.enc -out cicd-variables.sh -k "${{ secrets.DEV_CICD_VARIABLES_ENC_PW }}"
          chmod +x cicd-variables.sh

      - name: Load selected env variables into GitHub Environment
        run: |
          source ./cicd-variables.sh

          echo "::add-mask::$SSH_KEY"
          echo "::add-mask::$SSH_KEY_BASE64"
          echo "::add-mask::$AWS_SERVER_IP"
          echo "::add-mask::$AWS_ACCESS_KEY_ID"
          echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
          echo "::add-mask::$AWS_DEFAULT_REGION"
          echo "::add-mask::$AWS_S3_BUCKET"
          echo "::add-mask::$S3_BUCKET_INFRA"
          echo "::add-mask::$DB_URL"
          echo "::add-mask::$DB_USERNAME"
          echo "::add-mask::$DB_PASSWORD"
          echo "::add-mask::$JWT_SECRETS"
          echo "::add-mask::$KAKAO_CLIENT_ID"
          echo "::add-mask::$KAKAO_PROD_REDIRECT_URI"
          echo "::add-mask::$KAKAO_DEV_REDIRECT_URI"
          echo "::add-mask::$KAKAO_LOCAL_REDIRECT_URI"
          echo "::add-mask::$COOKIE_DOMAIN"
          echo "::add-mask::$SENTRY_DSN"
          echo "::add-mask::$SENTRY_AUTH_TOKEN"
          echo "::add-mask::$SARAMIN_SECRET_KEY"
          

          echo "SSH_KEY=$SSH_KEY" >> $GITHUB_ENV
          echo "SSH_KEY_BASE64=$SSH_KEY_BASE64" >> $GITHUB_ENV
          echo "AWS_SERVER_IP=$AWS_SERVER_IP" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION" >> $GITHUB_ENV
          echo "AWS_S3_BUCKET=$AWS_S3_BUCKET" >> $GITHUB_ENV
          echo "S3_BUCKET_INFRA=$S3_BUCKET_INFRA" >> $GITHUB_ENV
          echo "DB_URL=$DB_URL" >> $GITHUB_ENV
          echo "DB_USERNAME=$DB_USERNAME" >> $GITHUB_ENV
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
          echo "JWT_SECRETS=$JWT_SECRETS" >> $GITHUB_ENV
          echo "KAKAO_CLIENT_ID=$KAKAO_CLIENT_ID" >> $GITHUB_ENV
          echo "KAKAO_PROD_REDIRECT_URI=$KAKAO_PROD_REDIRECT_URI" >> $GITHUB_ENV
          echo "KAKAO_DEV_REDIRECT_URI=$KAKAO_DEV_REDIRECT_URI" >> $GITHUB_ENV
          echo "KAKAO_LOCAL_REDIRECT_URI=$KAKAO_LOCAL_REDIRECT_URI" >> $GITHUB_ENV
          echo "COOKIE_DOMAIN=$COOKIE_DOMAIN" >> $GITHUB_ENV
          echo "SENTRY_DSN=$SENTRY_DSN" >> $GITHUB_ENV
          echo "SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN" >> $GITHUB_ENV
          echo "SARAMIN_SECRET_KEY=$SARAMIN_SECRET_KEY" >> $GITHUB_ENV
          
      - name: Restore SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_KEY_BASE64}" | base64 --decode > "${SSH_KEY}"
          chmod 600 "${SSH_KEY}"

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Set timestamp-based path (Asia/Seoul)
        run: |
          TIMESTAMP=$(TZ='Asia/Seoul' date +%Y-%m-%d_%H_%M_%S)
          echo "DEPLOY_PATH=${TIMESTAMP}_${COMMIT_HASH}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Upload build to S3
        run: |
          mkdir -p ./deploy
          cp ./build/libs/careerbee-0.0.1-SNAPSHOT.jar ./deploy/careerbee-api.jar
          echo "Uploading to: ${S3_BUCKET_INFRA}/be/${DEPLOY_PATH}"
          aws s3 cp ./deploy "${S3_BUCKET_INFRA}/be/${DEPLOY_PATH}/" --recursive

      - name: Deploy to EC2 and restart Spring Boot
        run: |
          echo "EC2 서버와 연결할 수 없음." > failure_reason.txt
          ssh -i "${SSH_KEY}" -o StrictHostKeyChecking=no "ubuntu@${AWS_SERVER_IP}" <<EOF
            set -e
            pkill -f 'careerbee-api.jar' || true

            mkdir -p ~/release
            sudo touch /var/log/backend.log
            sudo chown -R ubuntu:ubuntu /var/log/backend.log

            aws s3 cp ${S3_BUCKET_INFRA}/be/${DEPLOY_PATH}/careerbee-api.jar ~/release/careerbee-api.jar

            nohup java \
              -Dspring.profiles.active=dev \
              -DDB_URL="${DB_URL}" \
              -DDB_USERNAME="${DB_USERNAME}" \
              -DDB_PASSWORD="${DB_PASSWORD}" \
              -DJWT_SECRETS="${JWT_SECRETS}" \
              -DKAKAO_CLIENT_ID="${KAKAO_CLIENT_ID}" \
              -DKAKAO_PROD_REDIRECT_URI="${KAKAO_PROD_REDIRECT_URI}" \
              -DKAKAO_DEV_REDIRECT_URI="${KAKAO_DEV_REDIRECT_URI}" \
              -DKAKAO_LOCAL_REDIRECT_URI="${KAKAO_LOCAL_REDIRECT_URI}" \
              -DCOOKIE_DOMAIN="${COOKIE_DOMAIN}" \
              -DSENTRY_DSN="${SENTRY_DSN}" \
              -DSENTRY_AUTH_TOKEN="${SENTRY_AUTH_TOKEN}" \
              -DAWS_S3_ACCESSKEY="${AWS_ACCESS_KEY_ID}" \
              -DAWS_S3_SECRETKEY="${AWS_SECRET_ACCESS_KEY}" \
              -DAWS_REGION="${AWS_DEFAULT_REGION}" \
              -DAWS_S3_BUCKET="${AWS_S3_BUCKET}" \
              -DSARAMIN_SECRET_KEY="${SARAMIN_SECRET_KEY}" \
              --add-opens java.base/java.lang=ALL-UNNAMED \
              --add-exports java.base/sun.net=ALL-UNNAMED \
              -Djdk.attach.allowAttachSelf=true \
              -javaagent:/home/ubuntu/scouter/agent.java/scouter.agent.jar \
              -Dscouter.config=/home/ubuntu/scouter/agent.java/conf/scouter.conf \
              -Dobj_name=careerbee-api \
              -jar ~/release/careerbee-api.jar > /var/log/backend.log 2>&1 &
          EOF

          rm -f failure_reason.txt

      - name: Health check and rollback if needed
        run: |
          set -e
          for i in $(seq 1 5); do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://dev-api.careerbee.co.kr/health-check")
            if [ "$STATUS" == "200" ]; then
              break
            fi
            echo $STATUS
            sleep 10
          done

          if [ "$STATUS" != "200" ]; then
            echo "헬스 체크 실패. 상태 코드: $STATUS" > failure_reason.txt

            LATEST_VALID_BACKUP=$(aws s3 ls "${S3_BUCKET_INFRA}/be/" | awk '{print $2}' | grep -v "^${DEPLOY_PATH}/$" | sort | tail -n 1 | sed 's#/$##')
            if [ -z "$LATEST_VALID_BACKUP" ]; then
              exit 1
            fi

            ssh -i "${SSH_KEY}" -o StrictHostKeyChecking=no "ubuntu@${AWS_SERVER_IP}" <<EOF
              set -e
              pkill -f 'careerbee-api.jar' || true

              mkdir -p ~/release
              sudo touch /var/log/backend.log
              sudo chown -R ubuntu:ubuntu /var/log/backend.log

              aws s3 cp ${S3_BUCKET_INFRA}/be/${LATEST_VALID_BACKUP}/careerbee-api.jar ~/release/careerbee-api.jar

              nohup java \
                -Dspring.profiles.active=dev \
                -DDB_URL="${DB_URL}" \
                -DDB_USERNAME="${DB_USERNAME}" \
                -DDB_PASSWORD="${DB_PASSWORD}" \
                -DJWT_SECRETS="${JWT_SECRETS}" \
                -DKAKAO_CLIENT_ID="${KAKAO_CLIENT_ID}" \
                -DKAKAO_PROD_REDIRECT_URI="${KAKAO_PROD_REDIRECT_URI}" \
                -DKAKAO_DEV_REDIRECT_URI="${KAKAO_DEV_REDIRECT_URI}" \
                -DKAKAO_LOCAL_REDIRECT_URI="${KAKAO_LOCAL_REDIRECT_URI}" \
                -DCOOKIE_DOMAIN="${COOKIE_DOMAIN}" \
                -DSENTRY_DSN="${SENTRY_DSN}" \
                -DSENTRY_AUTH_TOKEN="${SENTRY_AUTH_TOKEN}" \
                -DAWS_S3_ACCESSKEY="${AWS_ACCESS_KEY_ID}" \
                -DAWS_S3_SECRETKEY="${AWS_SECRET_ACCESS_KEY}" \
                -DAWS_REGION="${AWS_DEFAULT_REGION}" \
                -DAWS_S3_BUCKET="${AWS_S3_BUCKET}" \
                -DSARAMIN_SECRET_KEY="${SARAMIN_SECRET_KEY}" \
                --add-opens java.base/java.lang=ALL-UNNAMED \
                --add-exports java.base/sun.net=ALL-UNNAMED \
                -Djdk.attach.allowAttachSelf=true \
                -javaagent:/home/ubuntu/scouter/agent.java/scouter.agent.jar \
                -Dscouter.config=/home/ubuntu/scouter/agent.java/conf/scouter.conf \
                -Dobj_name=careerbee-api \
                -jar ~/release/careerbee-api.jar > /var/log/backend.log 2>&1 &
          EOF
            
            aws s3 rm "${S3_BUCKET_INFRA}/be/${DEPLOY_PATH}/" --recursive

            exit 1
          fi

      - name: Notify Discord on Success
        if: success()
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TIMESTAMP="${{ github.event.head_commit.timestamp }}"
          
          DESCRIPTION="**Repository:** \`${REPO}\`
          **Branch:** \`${BRANCH}\`
          **Commit:** \`${COMMIT_MSG}\`
          
          
          [🔗 실행 로그 보기](${RUN_URL})"
          
          jq -n \
            --arg desc "$DESCRIPTION" \
            --arg timestamp "$TIMESTAMP" \
            '{
              "embeds": [
                {
                  "title": "✅ 개발 환경에 백엔드 배포 성공",
                  "description": $desc,
                  "color": 65280,
                  "footer": { "text": "GitHub Actions - DEV Deploy(BE)" },
                  "timestamp": $timestamp
                }
              ]
            }' > payload.json
          
          curl -H "Content-Type: application/json" \
                -X POST \
                -d @payload.json \
                ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notify Discord on Failure
        if: failure()
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TIMESTAMP="${{ github.event.head_commit.timestamp }}"
          
          if [ -f failure_reason.txt ]; then
            FAILURE_REASON=$(cat failure_reason.txt)
          else
            FAILURE_REASON="워크플로 로그를 확인해 주세요."
          fi

          DESCRIPTION="**Repository:** \`${REPO}\`
          **Branch:** \`${BRANCH}\`
          **Commit:** \`${COMMIT_MSG}\`
          **실패 사유:** \`${FAILURE_REASON}\`
          
          [🔗 실행 로그 보기](${RUN_URL})"
          
          jq -n \
            --arg desc "$DESCRIPTION" \
            --arg timestamp "$TIMESTAMP" \
            '{
              "embeds": [
                {
                  "title": "❌ 개발 환경에 백엔드 배포 실패",
                  "description": $desc,
                  "color": 16711680,
                  "footer": { "text": "GitHub Actions - DEV Deploy(BE)" },
                  "timestamp": $timestamp
                }
              ]
            }' > payload.json
          
          curl -H "Content-Type: application/json" \
                -X POST \
                -d @payload.json \
                ${{ secrets.DISCORD_WEBHOOK_URL }}